name: "Semantic Versioning"
description: "Describes the current version and potential next versions following Semantic Versioning"
author: "Brendan Brassil"
inputs:
  tag-prefix:
    # Identifier which prefixes the semantic version in a tag (e.g. 'v' if 'v1.2.3' is an example of a valid tag)
    description: Tag Prefix
    type: string
    required: false
  workspace-path:
    # Path to a checked-out repository
    description: "Workspace Path"
    type: string
    required: false
    default: ${{ github.workspace }}
outputs:
  core:
    description: "Current Core Version"
    value: ${{ steps.current-version.outputs.core }}
  pre-release:
    description: "Current Pre-Release Version"
    value: ${{ steps.current-version.outputs.pre-release }}
  build:
    description: "Current Build Metadata"
    value: ${{ steps.current-version.outputs.build }}
  next-major:
    description: "Next Major Version"
    value: ${{ steps.next-version.outputs.major }}
  next-minor:
    description: "Next Minor Version"
    value: ${{ steps.next-version.outputs.minor }}
  next-patch:
    description: "Next Patch Version"
    value: ${{ steps.next-version.outputs.patch }}
runs:
  using: "composite"
  steps:
    - id: current-version
      name: "Current Version"
      shell: bash
      run: |
        cwd=$(pwd)
        cd ${{ inputs.workspace-path }}
        tags=$(git tag --merged HEAD --sort=-version:refname)
        cd "$cwd"
        tag_prefix=${{ inputs.tag-prefix }}
        full=$(echo "$tags" | bash ./src/filter.sh "$tag_prefix" | head -n 1)
        {
          read -r major
          read -r minor
          read -r patch
          read -r pre_release
          read -r build
        } <<< (bash ./src/split.sh "$full")
        echo "major=$major" >> "$GITHUB_OUTPUT"
        echo "minor=$minor" >> "$GITHUB_OUTPUT"
        echo "patch=$patch" >> "$GITHUB_OUTPUT"
        if [[ $pre_release != "." ]]; then
          echo "pre_release=$pre_release" >> "$GITHUB_OUTPUT"
        fi
        if [[ $build != "." ]]; then
          echo "build=$build" >> "$GITHUB_OUTPUT"
        fi
        echo "core=$major.$minor.$patch" >> "$GITHUB_OUTPUT"
    - id: next-version
      name: "Next Version"
      shell: bash
      run: |
        major=${{ steps.current-version.outputs.major}}
        minor=${{ steps.current-version.outputs.minor}}
        patch=${{ steps.current-version.outputs.patch}}
        echo "major=$(($major + 1)).$minor.$patch" >> "$GITHUB_OUTPUT"
        echo "minor=$major.$(($minor + 1)).$patch" >> "$GITHUB_OUTPUT"
        echo "patch=$major.$minor.$(($patch + 1))" >> "$GITHUB_OUTPUT"